[["tidy-rna-seq-eda.html", "Chapter 7 Tidy RNA-seq EDA", " Chapter 7 Tidy RNA-seq EDA Objective: learn how to make basic EDA plots (plotting scaled counts) of RNA-seq data using tidy-style verbs. The tidybulk Bioconductor package and associated tidy transcriptomics ecosystem (tidySummarizedExperiment, tidySingleCell, tidyseurat, etc.) provide a bridge between the SummarizedExperiment-style representation of matrix data with attached metadata, to the tidy-style representation of data (one row per observation). For more details on the package, check out the tidybulk website, and the publication: Mangiola et al. (2021). Here we will briefly examine the difference between tidy manipulation of these matrix-style objects compared to how these objects would be manipulated in other Bioconductor workflows (e.g. DESeq2, edgeR, or limma workflows). As you will see, there are multiple ways to generate the same or similar exploratory plots and analyses. we recommend to consider which is more appropriate to your purpose. For package code, you may prefer to have fewer dependencies, going with core Bioconductor objects and packages. For scripting, the “fluent” and piped style of tidybulk may be preferable, and easier for others to read and modify your code at a future date. Here we just compare code for some basic tasks, scaling counts and performing DE with DESeq2. However, note that tidybulk has many functionalities implemented, including dimension reduction and visualization (PCA, MDS, tSNE, UMAP), clustering, gene set testing, cell type composition analysis and cell abundance testing, unwanted variation modeling, imputation, etc. library(oct4) dir &lt;- system.file(&quot;extdata&quot;, package=&quot;oct4&quot;) coldata &lt;- read.csv(file.path(dir,&quot;coldata.csv&quot;)) coldata ## names line condition ## 1 SRX2236945 OCT4 untrt ## 2 SRX2236946 OCT4 untrt ## 3 SRX2236947 OCT4 untrt ## 4 SRX2236948 OCT4 trt ## 5 SRX2236949 OCT4 trt ## 6 SRX2236950 OCT4 trt ## 7 SRX2236951 BRG1 untrt ## 8 SRX2236952 BRG1 untrt ## 9 SRX2236953 BRG1 untrt ## 10 SRX2236954 BRG1 trt ## 11 SRX2236955 BRG1 trt ## 12 SRX2236956 BRG1 trt coldata$files &lt;- file.path(dir, &quot;quants&quot;, coldata$names, &quot;quant.sf.gz&quot;) library(tximeta) se &lt;- tximeta(coldata) gse &lt;- summarizeToGene(se) library(org.Mm.eg.db) gse &lt;- addIds(gse, &quot;SYMBOL&quot;) library(SummarizedExperiment) assayNames(gse) assays(gse) &lt;- assays(gse)[1:3] # save for easy loading later save(gse, file=&quot;data/oct4_obj.rda&quot;) library(SummarizedExperiment) load(&quot;data/oct4_obj.rda&quot;) gse$rep &lt;- rep(1:3, 4) colnames(gse) &lt;- paste(gse$line,gse$condition,gse$rep,sep=&quot;-&quot;) assay(gse, &quot;counts&quot;) &lt;- round(assay(gse, &quot;counts&quot;)) # for consistency library(AnnotationDbi) library(org.Mm.eg.db) ## # pluripotency tab &lt;- select(org.Mm.eg.db, &quot;GO:0019827&quot;, &quot;SYMBOL&quot;, &quot;GO&quot;) ## &#39;select()&#39; returned 1:many mapping between keys and columns tab &lt;- tab[!duplicated(tab$SYMBOL),] pluri &lt;- tab$SYMBOL library(tidybulk) library(dplyr) library(stringr) oct4 &lt;- gse %&gt;% tidybulk() %&gt;% filter(line == &quot;OCT4&quot;) %&gt;% mutate(.sample = str_remove(.sample, &quot;OCT4-&quot;)) %&gt;% mutate(.sample = factor(.sample, levels=unique(.sample)), condition = factor(condition, c(&quot;untrt&quot;,&quot;trt&quot;))) oct4 &lt;- oct4 %&gt;% keep_abundant(factor_of_interest = condition) %&gt;% scale_abundance(method=&quot;RLE&quot;) # DESeq2 scaling ## tidybulk says: the sample with largest library size untrt-1 was chosen as reference for scaling library(ggplot2) oct4 %&gt;% ggplot(aes(.sample, log10(counts_scaled + 1))) + geom_boxplot() library(DESeq2) gse_sub &lt;- gse[ , gse$line == &quot;OCT4&quot; ] gse_sub$condition &lt;- factor(gse_sub$condition) dds &lt;- gse_sub %&gt;% DESeqDataSet(~condition) %&gt;% estimateSizeFactors() ## using counts and average transcript lengths from tximeta ## using &#39;avgTxLength&#39; from assays(dds), correcting for library size boxplot(log10(counts(dds, normalized=TRUE) + 1)) oct4 %&gt;% filter(SYMBOL %in% pluri) %&gt;% mutate(logcounts = log10(counts_scaled + 1)) %&gt;% mutate(Oct4 = ifelse(SYMBOL == &quot;Pou5f1&quot;, &quot;red&quot;, &quot;black&quot;)) %&gt;% group_by(.feature) %&gt;% mutate(logcounts = logcounts - mean(logcounts)) %&gt;% ungroup() %&gt;% ggplot(aes(.sample, logcounts, group=.feature, color=Oct4)) + geom_point() + geom_line() + scale_color_identity() gene_idx &lt;- mcols(dds)$SYMBOL %in% pluri mat &lt;- log10(counts(dds, normalized=TRUE)[gene_idx,] + 1) mat &lt;- mat - rowMeans(mat) hilite &lt;- rownames(dds)[which(mcols(dds)$SYMBOL == &quot;Pou5f1&quot;)] plot(mat[1,], type=&quot;n&quot;, ylim=c(-1,1), xlab=&quot;samples&quot;, ylab=&quot;logcounts&quot;) for (i in 1:nrow(mat)) { col &lt;- ifelse(rownames(mat)[i] == hilite, &quot;red&quot;, &quot;black&quot;) points(mat[i,], type=&quot;b&quot;, col=col) } gene_idx &lt;- oct4 %&gt;% pivot_transcript() %&gt;% pull(.feature) assays(dds) &lt;- assays(dds)[1:2] # compatiblity with tidybulk res &lt;- dds[gene_idx,] %&gt;% DESeq(quiet=TRUE) %&gt;% results() oct4 &lt;- oct4 %&gt;% test_differential_abundance(~condition, method=&quot;deseq2&quot;, quiet=TRUE) ## ===================================== ## tidybulk says: All testing methods use raw counts, irrespective of if scale_abundance ## or adjust_abundance have been calculated. Therefore, it is essential to add covariates ## such as batch effects (if applicable) in the formula. ## ===================================== ## tidybulk says: to access the raw results (fitted GLM) do `attr(..., &quot;internals&quot;)$DESeq2` ## This message is displayed once per session. tidy_res &lt;- oct4 %&gt;% pivot_transcript() all.equal(rownames(res), tidy_res$.feature) ## [1] TRUE table(base_sig = res$padj &lt; .1, tidy_sig = tidy_res$padj &lt; .1) ## tidy_sig ## base_sig FALSE TRUE ## FALSE 17743 0 ## TRUE 0 3734 plot_data &lt;- oct4 %&gt;% filter(SYMBOL %in% pluri) %&gt;% mutate(logcounts = log10(counts_scaled + 1)) %&gt;% mutate(Oct4 = ifelse(SYMBOL == &quot;Pou5f1&quot;, &quot;red&quot;, &quot;black&quot;)) %&gt;% group_by(.feature) %&gt;% mutate(logcounts = logcounts - mean(logcounts)) %&gt;% ungroup() %&gt;% mutate(gene_type = case_when( padj &lt; .1 &amp; log2FoldChange &gt; 0 ~ &quot;up&quot;, padj &lt; .1 &amp; log2FoldChange &lt; 0 ~ &quot;down&quot;, TRUE ~ &quot;null&quot;)) library(ggrepel) plot_data %&gt;% filter(gene_type != &quot;null&quot;) %&gt;% ggplot(aes(.sample, logcounts, group=.feature, color=Oct4)) + geom_point() + geom_line() + geom_text_repel(data=plot_data %&gt;% filter(.sample == &quot;trt-3&quot;, gene_type != &quot;null&quot;), aes(.sample, logcounts, label=SYMBOL), nudge_x=.5, seed=1) + scale_color_identity() + facet_wrap(~gene_type) + scale_x_discrete(expand = expansion(add = 2)) + xlab(&quot;sample&quot;) ## Warning: ggrepel: 8 unlabeled data points (too many overlaps). Consider increasing max.overlaps References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
